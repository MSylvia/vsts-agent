phases:

################################################################################
- phase: build_windows_agent
################################################################################
  displayName: Windows Agent
  queue:
    demands: agent.os -equals Windows_NT
  steps:

  # Clean
  - checkout: self
    clean: true
  
  - script: dev.cmd layout Release
    workingDirectory: src
    displayName: Build & Layout Release

  - script: dev.cmd test
    workingDirectory: src
    displayName: Test
  
  ####################
  # Add signing steps
  ####################

  - script: dev.cmd package Release
    workingDirectory: src
    displayName: Package Release
    condition: and(succeeded(), ne(variables['build.reason'], 'PullRequest'))

  - task: PublishBuildArtifacts@1
    displayName: Publish Artifact (Windows)
    condition: and(succeeded(), ne(variables['build.reason'], 'PullRequest'))
    inputs:
      pathToPublish: _package
      artifactName: agent
      artifactType: container

################################################################################
- phase: build_linux_agent
################################################################################
  displayName: Linux Agent
  queue:
    demands: agent.os -equals linux
  steps:

  # Clean
  - checkout: self
    clean: true

  - script: ./dev.sh layout Release
    workingDirectory: src
    displayName: Build & Layout Release

  - script: ./dev.sh test
    workingDirectory: src
    displayName: Test

  - script: ./dev.sh package Release
    workingDirectory: src
    displayName: Package Release
    condition: and(succeeded(), ne(variables['build.reason'], 'PullRequest'))

  - task: PublishBuildArtifacts@1
    displayName: Publish Artifact (Linux)
    condition: and(succeeded(), ne(variables['build.reason'], 'PullRequest'))
    inputs:
      pathToPublish: _package
      artifactName: agent
      artifactType: container

################################################################################
- phase: build_osx_agent
################################################################################
  displayName: OSX Agent
  queue:
    demands: agent.os -equals darwin
  steps:

  # Clean
  - checkout: self
    clean: true

  - script: ./dev.sh layout Release
    workingDirectory: src
    displayName: Build & Layout Release

  - script: ./dev.sh test
    workingDirectory: src
    displayName: Test    
  
  - script: ./dev.sh package Release
    workingDirectory: src
    displayName: Package Release
    condition: and(succeeded(), ne(variables['build.reason'], 'PullRequest'))

  - task: PublishBuildArtifacts@1
    displayName: Publish Artifact (OSX)
    condition: and(succeeded(), ne(variables['build.reason'], 'PullRequest'))
    inputs:
      pathToPublish: _package
      artifactName: agent
      artifactType: container

################################################################################
- phase: publish_agent_packages
################################################################################
  displayName: Publish Agents (Windows/Linux/OSX)
  queue:
    demands: agent.os -equals Windows_NT
  dependsOn: 
  - build_windows_agent
  - build_osx_agent
  - build_linux_agent
  condition: and(succeeded(), eq(variables.publish, true), ne(variables['build.reason'], 'PullRequest'))
  steps:
  
  - checkout: none
  
  - task: DownloadBuildArtifacts@0
    displayName: Download Agent Packages
    condition: and(succeeded(), ne(variables['build.reason'], 'PullRequest'))
    inputs:
      artifactName: agent

  - powershell: |
      Write-Host "Preloading Azure modules." # This is for better performance, to avoid module-autoloading.
      Import-Module AzureRM, AzureRM.profile, AzureRM.Storage, Azure.Storage, AzureRM.Cdn -ErrorAction Ignore -PassThru
      $uploadFiles = New-Object System.Collections.ArrayList
      $userName = "$(ApplicationId)"
      $password = ConvertTo-SecureString "$(Token)" -AsPlainText -Force
      $credential = New-Object System.Management.Automation.PSCredential($username, $password)
      Login-AzureRmAccount -ServicePrincipal -Credential $credential -TenantId $(TenantId)
      $storage = Get-AzureRmStorageAccount -ResourceGroupName vstsagentpackages -AccountName vstsagentpackages
      Get-ChildItem -LiteralPath "$(System.ArtifactsDirectory)/agent" | ForEach-Object {
        $versionDir = $_.Name.Trim('.zip').Trim('.tar.gz')
        $versionDir = $versionDir.SubString($versionDir.LastIndexOf('-') + 1)
        Write-Host "Uploading $_ to BlobStorage vstsagentpackages/agent/$versionDir"
        Set-AzureStorageBlobContent -Context $storage.Context -Container agent -File "$(System.ArtifactsDirectory)/agent/$_" -Blob "$versionDir/$_" -Force
        $uploadFiles.Add("/agent/$versionDir/$_")
      }
      Write-Host "Purge Azure CDN Cache"
      Unpublish-AzureRmCdnEndpointContent -EndpointName vstsagent -ProfileName vstsagentpackages -ResourceGroupName vstsagentpackages -PurgeContent $uploadFiles
      Write-Host "Force Refresh Azure CDN Cache"
      Publish-AzureRmCdnEndpointContent -EndpointName vstsagent -ProfileName vstsagentpackages -ResourceGroupName vstsagentpackages -LoadContent $uploadFiles
      Get-AzureRmCdnEndpoint -EndpointName vstsagent -ProfileName vstsagentpackages -ResourceGroupName vstsagentpackages
    displayName: Upload to Azure Blob